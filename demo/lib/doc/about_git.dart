// ########### 面试提问：git merge 与 git rebase 的区别？

/// 不同公司，不同情况有不同使用场景，不过大部分情况推荐如下：
/// 无论是个人单机开发，还是公司协作开发，只要没有特殊需求，用merge准没错！！！
///
///
/// 拉公共分支最新代码——rebase，
/// 也就是git pull -r或git pull --rebase。
/// 这样的好处很明显，提交记录会比较简洁。
/// 但有个缺点就是rebase以后我就不知道我的当前分支最早是从哪个分支拉出来的了，
/// 因为基底变了嘛，所以看个人需求了。总体来说，即使是单机也不建议使用。

/// 往公共分支上合代码——merge。如果使用rebase，那么其他开发人员想看主分支的历史，
/// 就不是原来的历史了，历史已经被你篡改了。
///
/// 举个例子解释下，
/// 比如张三和李四从共同的节点拉出来开发，张三先开发完提交了两次然后merge上去了，
/// 李四后来开发完如果rebase上去（注意，李四需要切换到自己本地的主分支，
/// 假设先pull了张三的最新改动下来，然后执行<git rebase 李四的开发分支>，
/// 然后再git push到远端），则李四的新提交变成了张三的新提交的新基底，
/// 本来李四的提交是最新的，结果最新的提交显示反而是张三的，就乱套了，以后有问题就不好追溯了。
///
/// 正因如此，大部分公司其实会禁用rebase，不管是拉代码还是push代码统一都使用merge，
/// 虽然会多出无意义的一条提交记录“Merge … to …”，但至少能清楚地知道主线上谁合了的代码以及他们合代码的时间先后顺序

///原文链接：https://blog.csdn.net/weixin_42310154/article/details/119004977